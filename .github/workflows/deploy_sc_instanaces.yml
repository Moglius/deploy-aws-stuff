name: "Terraform deploy SC instanaces"
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/data/sc_srvs.tfvars'

# https://stackoverflow.com/questions/70928424/limit-github-action-workflow-concurrency-on-push-and-pull-request
concurrency:
  group: ${{ github.head_ref || github.ref_name }}

permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: src/tf_sc
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_KEY_NAME: ${{ secrets.AWS_EC2_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file=../data/sc_srvs.tfvars
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Disable EC2 Termination Protection
        run: |
          pip install boto3
          /bin/bash -c "terraform plan -var-file=../data/sc_srvs.tfvars |grep destroyed | awk '{print $3}' | python ../dynamo/disable_protection.py"

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file=../data/sc_srvs.tfvars
